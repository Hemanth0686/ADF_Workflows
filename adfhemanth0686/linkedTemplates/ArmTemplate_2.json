{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfhemanth0686"
		},
		"Storageevent_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/39e0b54b-fda8-41ac-a2ea-6e64de374306/resourceGroups/Hemanth/providers/Microsoft.Storage/storageAccounts/storagehemanth0011"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Aggregatedataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MF1_dataset",
								"type": "DatasetReference"
							},
							"name": "Mutualfunddata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MFCategory_count",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Fund as string,",
						"          {Fund Manager} as string,",
						"          Category as string,",
						"          {2015} as string,",
						"          {2016} as string,",
						"          {2017} as string,",
						"          {2018} as string,",
						"          {2019} as string,",
						"          {2020} as string,",
						"          {2021} as string,",
						"          {2022} as string,",
						"          {2023} as string,",
						"          {2024} as string,",
						"          classification as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Mutualfunddata",
						"Mutualfunddata aggregate(groupBy(Category),",
						"     category_wise = count(Fund)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MF category_wise_count.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Category Name} = Category,",
						"          {Category Count} = category_wise",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MF1_dataset",
								"type": "DatasetReference"
							},
							"name": "Mutualfunddata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Equity_MF_datset",
								"type": "DatasetReference"
							},
							"name": "EquitySink"
						},
						{
							"dataset": {
								"referenceName": "Debt_MF_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Hybrid_MF_dataset",
								"type": "DatasetReference"
							},
							"name": "Hybridsink"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Fund as string,",
						"          {Fund Manager} as string,",
						"          Category as string,",
						"          {2015} as string,",
						"          {2016} as string,",
						"          {2017} as string,",
						"          {2018} as string,",
						"          {2019} as string,",
						"          {2020} as string,",
						"          {2021} as string,",
						"          {2022} as string,",
						"          {2023} as string,",
						"          {2024} as string,",
						"          classification as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Mutualfunddata",
						"Mutualfunddata split(startsWith(classification, 'Equity'),",
						"     startsWith(classification, 'Debt'),",
						"     disjoint: false) ~> split1@(EquityMF, DebtMF, HybridMF)",
						"split1@EquityMF sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Equityfunds.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Fund Name} = Fund,",
						"          {Fund Manager},",
						"          Category,",
						"          {Equity type} = classification",
						"     ),",
						"     partitionBy('hash', 1)) ~> EquitySink",
						"split1@DebtMF sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DebtMF.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Fund Name} = Fund,",
						"          {Fund Manager},",
						"          Category,",
						"          {Debt Type} = classification",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@HybridMF sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Hybrid&otherMF.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Fund Name} = Fund,",
						"          {Fund Manager},",
						"          Category,",
						"          {Hybrid&other Types} = classification",
						"     ),",
						"     partitionBy('hash', 1)) ~> Hybridsink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Derived_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Mutualfunddataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "performance2024MF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Fund as string,",
						"          {Fund Manager} as string,",
						"          Category as string,",
						"          {2015} as string,",
						"          {2016} as string,",
						"          {2017} as string,",
						"          {2018} as string,",
						"          {2019} as string,",
						"          {2020} as string,",
						"          {2021} as string,",
						"          {2022} as string,",
						"          {2023} as string,",
						"          {2024} as float,",
						"          classification as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive({performance 2024} = iif(toFloat(2024) > 7, 'Good', 'Average')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['2024_MF_performace'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Fund,",
						"          {Fund Manager},",
						"          Category,",
						"          {2024},",
						"          classification,",
						"          {performance 2024}",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ordersdataset",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "customersdataset",
								"type": "DatasetReference"
							},
							"name": "customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customersoutputdataset",
								"type": "DatasetReference"
							},
							"name": "sinkcustomers"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "joinCustomersOrders"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          Product as string,",
						"          Amount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orders",
						"source(output(",
						"          CustomerID as string,",
						"          Name as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customers",
						"joinCustomersOrders select(mapColumn(",
						"          Name,",
						"          Country,",
						"          Product,",
						"          Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"customers, orders join(customers@CustomerID == orders@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomersOrders",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['customers.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {customer Name} = Name,",
						"          Country,",
						"          Product,",
						"          Amount",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkcustomers"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplit_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Conditional_DF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditional_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Mutualfunddata": {},
									"EquitySink": {},
									"sink1": {},
									"Hybridsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Conditional_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orders": {},
									"customers": {},
									"sinkcustomers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregate_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Aggregatedataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Aggregatedataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Mutualfunddata": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Aggregatedataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Storageevent_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "storageevent _pl",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input/blobs/csvfiles/comparison.csv",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Storageevent_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}